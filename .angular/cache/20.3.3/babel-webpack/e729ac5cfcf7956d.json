{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { Chart, registerables } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"chartCanvas\"];\nChart.register(...registerables);\nexport let ChartComponent = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class ChartComponent {\n    constructor() {\n      this.type = 'line';\n    }\n    ngOnInit() {\n      // Component initialization\n    }\n    ngAfterViewInit() {\n      this.createChart();\n    }\n    ngOnDestroy() {\n      if (this.chart) {\n        this.chart.destroy();\n      }\n    }\n    createChart() {\n      if (this.chart) {\n        this.chart.destroy();\n      }\n      const ctx = this.chartCanvas.nativeElement.getContext('2d');\n      if (!ctx) return;\n      const defaultOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              usePointStyle: true,\n              padding: 20\n            }\n          }\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            grid: {\n              color: 'rgba(0, 0, 0, 0.05)'\n            }\n          }\n        }\n      };\n      this.chart = new Chart(ctx, {\n        type: this.type,\n        data: this.data,\n        options: {\n          ...defaultOptions,\n          ...this.options\n        }\n      });\n    }\n    updateChart(newData) {\n      if (this.chart) {\n        this.chart.data = newData;\n        this.chart.update();\n      }\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function ChartComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ChartComponent)();\n    }, this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChartComponent,\n      selectors: [[\"app-chart\"]],\n      viewQuery: function ChartComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartCanvas = _t.first);\n        }\n      },\n      inputs: {\n        type: \"type\",\n        data: \"data\",\n        options: \"options\"\n      },\n      decls: 3,\n      vars: 0,\n      consts: [[\"chartCanvas\", \"\"], [1, \"chart-container\"]],\n      template: function ChartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵdomElementStart(0, \"div\", 1);\n          i0.ɵɵdomElement(1, \"canvas\", null, 0);\n          i0.ɵɵdomElementEnd();\n        }\n      },\n      dependencies: [CommonModule],\n      styles: [\".chart-container[_ngcontent-%COMP%]{position:relative;width:100%;height:100%;min-height:300px}canvas[_ngcontent-%COMP%]{width:100%!important;height:100%!important}\"]\n    }));\n  }\n  _staticBlock();\n  return ChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}