{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\n/**\n * Authentication Guard\n * Protects routes that require authentication\n */\nexport const authGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  return authService.isAuthenticated$.pipe(take(1), map(isAuthenticated => {\n    if (isAuthenticated) {\n      // Check if token is expired (mock tokens are treated as valid in dev)\n      if (authService.isTokenExpired()) {\n        console.warn('Token expired, redirecting to login');\n        // Store the attempted URL for redirecting after login\n        const returnUrl = state.url !== '/login' ? state.url : '/';\n        return router.createUrlTree(['/auth/login'], {\n          queryParams: {\n            returnUrl\n          }\n        });\n      }\n      // Check role-based access if specified in route data\n      const requiredRoles = route.data['roles'];\n      if (requiredRoles && requiredRoles.length > 0) {\n        const hasRole = authService.hasRole(requiredRoles);\n        if (!hasRole) {\n          console.warn('User does not have required role:', requiredRoles);\n          return router.createUrlTree(['/access-denied']);\n        }\n      }\n      // Check permission-based access if specified in route data\n      const requiredPermission = route.data['permission'];\n      if (requiredPermission) {\n        const hasPermission = authService.hasPermission(requiredPermission);\n        if (!hasPermission) {\n          console.warn('User does not have required permission:', requiredPermission);\n          return router.createUrlTree(['/access-denied']);\n        }\n      }\n      return true;\n    } else {\n      // Not authenticated, redirect to login\n      const returnUrl = state.url && state.url !== '/' ? state.url : '/dashboard';\n      console.log('Not authenticated, redirecting to login with return URL:', returnUrl);\n      return router.createUrlTree(['/auth/login'], {\n        queryParams: {\n          returnUrl\n        }\n      });\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}