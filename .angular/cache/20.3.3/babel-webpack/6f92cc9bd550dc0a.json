{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { Subject, interval } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/chips\";\nfunction PerformanceMonitorComponent_mat_card_19_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 34);\n  }\n}\nfunction PerformanceMonitorComponent_mat_card_19_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 35);\n  }\n  if (rf & 2) {\n    const point_r1 = ctx.$implicit;\n    const metric_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r2.getBarHeight(point_r1, metric_r2), \"%\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.getBarStatus(point_r1, metric_r2));\n  }\n}\nfunction PerformanceMonitorComponent_mat_card_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 19)(1, \"mat-card-header\")(2, \"mat-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 20)(5, \"div\", 21);\n    i0.ɵɵtemplate(6, PerformanceMonitorComponent_mat_card_19_div_6_Template, 1, 0, \"div\", 22);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(7, \"mat-card-content\")(8, \"div\", 23)(9, \"div\", 24);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementStart(11, \"span\", 25);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"div\", 26)(14, \"div\", 27)(15, \"span\", 28);\n    i0.ɵɵtext(16, \"Warning:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"span\", 29);\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 30)(20, \"span\", 28);\n    i0.ɵɵtext(21, \"Critical:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"span\", 29);\n    i0.ɵɵtext(23);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(24, \"div\", 31)(25, \"div\", 32);\n    i0.ɵɵtemplate(26, PerformanceMonitorComponent_mat_card_19_div_26_Template, 1, 3, \"div\", 33);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const metric_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", \"status-\" + metric_r2.status);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(metric_r2.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", \"status-\" + metric_r2.status);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", metric_r2.status === \"critical\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", metric_r2.value, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(metric_r2.unit);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate2(\"\", metric_r2.threshold.warning, \"\", metric_r2.unit);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate2(\"\", metric_r2.threshold.critical, \"\", metric_r2.unit);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", metric_r2.history);\n  }\n}\nfunction PerformanceMonitorComponent_mat_card_20_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 39)(1, \"div\", 40)(2, \"mat-icon\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 41)(5, \"div\", 42);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 43);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 44);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 45)(13, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function PerformanceMonitorComponent_mat_card_20_div_8_Template_button_click_13_listener() {\n      const alert_r5 = i0.ɵɵrestoreView(_r4).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.dismissAlert(alert_r5.id));\n    });\n    i0.ɵɵelementStart(14, \"mat-icon\");\n    i0.ɵɵtext(15, \"close\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const alert_r5 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", \"alert-\" + alert_r5.severity);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.getAlertIcon(alert_r5.severity));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(alert_r5.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(alert_r5.message);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(11, 5, alert_r5.timestamp, \"short\"));\n  }\n}\nfunction PerformanceMonitorComponent_mat_card_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 36)(1, \"mat-card-header\")(2, \"mat-card-title\")(3, \"mat-icon\");\n    i0.ɵɵtext(4, \"warning\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \" System Alerts \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"mat-card-content\")(7, \"div\", 37);\n    i0.ɵɵtemplate(8, PerformanceMonitorComponent_mat_card_20_div_8_Template, 16, 8, \"div\", 38);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.systemAlerts)(\"ngForTrackBy\", ctx_r2.trackByAlert);\n  }\n}\nexport let PerformanceMonitorComponent = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class PerformanceMonitorComponent {\n    constructor() {\n      this.destroy$ = new Subject();\n      this.systemMetrics = [];\n      this.systemAlerts = [];\n    }\n    ngOnInit() {\n      this.initializeMetrics();\n      this.startRealTimeUpdates();\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    initializeMetrics() {\n      this.systemMetrics = [{\n        name: 'CPU Usage',\n        value: 45,\n        unit: '%',\n        status: 'healthy',\n        threshold: {\n          warning: 70,\n          critical: 85\n        },\n        history: [40, 42, 38, 45, 48, 44, 41, 45]\n      }, {\n        name: 'Memory Usage',\n        value: 68,\n        unit: '%',\n        status: 'warning',\n        threshold: {\n          warning: 65,\n          critical: 80\n        },\n        history: [60, 62, 65, 68, 66, 69, 67, 68]\n      }, {\n        name: 'Disk I/O',\n        value: 25,\n        unit: 'MB/s',\n        status: 'healthy',\n        threshold: {\n          warning: 50,\n          critical: 80\n        },\n        history: [20, 22, 28, 25, 23, 26, 24, 25]\n      }, {\n        name: 'Network Latency',\n        value: 12,\n        unit: 'ms',\n        status: 'healthy',\n        threshold: {\n          warning: 50,\n          critical: 100\n        },\n        history: [10, 11, 15, 12, 9, 13, 11, 12]\n      }, {\n        name: 'Database Connections',\n        value: 145,\n        unit: '',\n        status: 'healthy',\n        threshold: {\n          warning: 200,\n          critical: 250\n        },\n        history: [140, 142, 148, 145, 143, 147, 144, 145]\n      }, {\n        name: 'Error Rate',\n        value: 2.1,\n        unit: '%',\n        status: 'warning',\n        threshold: {\n          warning: 2,\n          critical: 5\n        },\n        history: [1.8, 1.9, 2.2, 2.1, 2.0, 2.3, 2.2, 2.1]\n      }];\n      this.systemAlerts = [{\n        id: '1',\n        title: 'Memory Usage Warning',\n        message: 'Memory usage has exceeded 65% threshold',\n        severity: 'warning',\n        timestamp: new Date(Date.now() - 5 * 60 * 1000)\n      }, {\n        id: '2',\n        title: 'Error Rate Increase',\n        message: 'Application error rate has increased by 15%',\n        severity: 'warning',\n        timestamp: new Date(Date.now() - 15 * 60 * 1000)\n      }];\n    }\n    startRealTimeUpdates() {\n      interval(5000).pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.updateMetrics();\n      });\n    }\n    updateMetrics() {\n      this.systemMetrics.forEach(metric => {\n        // Simulate real-time data updates\n        const variance = (Math.random() - 0.5) * 10;\n        const newValue = Math.max(0, metric.value + variance);\n        metric.value = Math.round(newValue * 10) / 10;\n        // Update status based on thresholds\n        if (metric.value >= metric.threshold.critical) {\n          metric.status = 'critical';\n        } else if (metric.value >= metric.threshold.warning) {\n          metric.status = 'warning';\n        } else {\n          metric.status = 'healthy';\n        }\n        // Update history\n        metric.history.push(metric.value);\n        if (metric.history.length > 20) {\n          metric.history.shift();\n        }\n      });\n    }\n    getBarHeight(point, metric) {\n      const max = Math.max(...metric.history, metric.threshold.critical);\n      return point / max * 100;\n    }\n    getBarStatus(point, metric) {\n      if (point >= metric.threshold.critical) return 'bar-critical';\n      if (point >= metric.threshold.warning) return 'bar-warning';\n      return 'bar-healthy';\n    }\n    getAlertIcon(severity) {\n      switch (severity) {\n        case 'critical':\n          return 'error';\n        case 'warning':\n          return 'warning';\n        default:\n          return 'info';\n      }\n    }\n    getHealthyCount() {\n      return this.systemMetrics.filter(m => m.status === 'healthy').length;\n    }\n    getWarningCount() {\n      return this.systemMetrics.filter(m => m.status === 'warning').length;\n    }\n    getCriticalCount() {\n      return this.systemMetrics.filter(m => m.status === 'critical').length;\n    }\n    calculateUptime() {\n      return 99.7; // Simulated uptime\n    }\n    refreshMetrics() {\n      this.updateMetrics();\n    }\n    dismissAlert(alertId) {\n      this.systemAlerts = this.systemAlerts.filter(alert => alert.id !== alertId);\n    }\n    trackByMetric(index, metric) {\n      return metric.name;\n    }\n    trackByAlert(index, alert) {\n      return alert.id;\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function PerformanceMonitorComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PerformanceMonitorComponent)();\n    }, this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PerformanceMonitorComponent,\n      selectors: [[\"app-performance-monitor\"]],\n      decls: 63,\n      vars: 7,\n      consts: [[1, \"performance-container\"], [1, \"performance-header\"], [1, \"header-content\"], [1, \"header-controls\"], [\"selected\", \"\"], [\"mat-icon-button\", \"\", 3, \"click\"], [1, \"metrics-grid\"], [\"class\", \"metric-card\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"alerts-card\", 4, \"ngIf\"], [1, \"summary-card\"], [1, \"summary-grid\"], [1, \"summary-item\"], [1, \"summary-icon\", \"healthy\"], [1, \"summary-content\"], [1, \"summary-value\"], [1, \"summary-label\"], [1, \"summary-icon\", \"warning\"], [1, \"summary-icon\", \"critical\"], [1, \"summary-icon\", \"info\"], [1, \"metric-card\", 3, \"ngClass\"], [1, \"metric-status\"], [1, \"status-indicator\", 3, \"ngClass\"], [\"class\", \"pulse\", 4, \"ngIf\"], [1, \"metric-display\"], [1, \"metric-value\"], [1, \"metric-unit\"], [1, \"metric-thresholds\"], [1, \"threshold\", \"warning\"], [1, \"threshold-label\"], [1, \"threshold-value\"], [1, \"threshold\", \"critical\"], [1, \"metric-chart\"], [1, \"mini-chart\"], [\"class\", \"chart-bar\", 3, \"height\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"pulse\"], [1, \"chart-bar\", 3, \"ngClass\"], [1, \"alerts-card\"], [1, \"alerts-list\"], [\"class\", \"alert-item\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"alert-item\", 3, \"ngClass\"], [1, \"alert-icon\"], [1, \"alert-content\"], [1, \"alert-title\"], [1, \"alert-message\"], [1, \"alert-timestamp\"], [1, \"alert-actions\"]],\n      template: function PerformanceMonitorComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\");\n          i0.ɵɵtext(4, \"System Performance Monitor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p\");\n          i0.ɵɵtext(6, \"Real-time system health and performance metrics\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 3)(8, \"mat-chip-listbox\")(9, \"mat-chip-option\", 4);\n          i0.ɵɵtext(10, \"Live\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"mat-chip-option\");\n          i0.ɵɵtext(12, \"5 min\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"mat-chip-option\");\n          i0.ɵɵtext(14, \"1 hour\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function PerformanceMonitorComponent_Template_button_click_15_listener() {\n            return ctx.refreshMetrics();\n          });\n          i0.ɵɵelementStart(16, \"mat-icon\");\n          i0.ɵɵtext(17, \"refresh\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(18, \"div\", 6);\n          i0.ɵɵtemplate(19, PerformanceMonitorComponent_mat_card_19_Template, 27, 11, \"mat-card\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(20, PerformanceMonitorComponent_mat_card_20_Template, 9, 2, \"mat-card\", 8);\n          i0.ɵɵelementStart(21, \"mat-card\", 9)(22, \"mat-card-header\")(23, \"mat-card-title\");\n          i0.ɵɵtext(24, \"Performance Summary\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"mat-card-content\")(26, \"div\", 10)(27, \"div\", 11)(28, \"div\", 12)(29, \"mat-icon\");\n          i0.ɵɵtext(30, \"check_circle\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(31, \"div\", 13)(32, \"div\", 14);\n          i0.ɵɵtext(33);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(34, \"div\", 15);\n          i0.ɵɵtext(35, \"Healthy Metrics\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(36, \"div\", 11)(37, \"div\", 16)(38, \"mat-icon\");\n          i0.ɵɵtext(39, \"warning\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(40, \"div\", 13)(41, \"div\", 14);\n          i0.ɵɵtext(42);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(43, \"div\", 15);\n          i0.ɵɵtext(44, \"Warning Metrics\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(45, \"div\", 11)(46, \"div\", 17)(47, \"mat-icon\");\n          i0.ɵɵtext(48, \"error\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(49, \"div\", 13)(50, \"div\", 14);\n          i0.ɵɵtext(51);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(52, \"div\", 15);\n          i0.ɵɵtext(53, \"Critical Metrics\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(54, \"div\", 11)(55, \"div\", 18)(56, \"mat-icon\");\n          i0.ɵɵtext(57, \"info\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(58, \"div\", 13)(59, \"div\", 14);\n          i0.ɵɵtext(60);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(61, \"div\", 15);\n          i0.ɵɵtext(62, \"System Uptime\");\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(19);\n          i0.ɵɵproperty(\"ngForOf\", ctx.systemMetrics)(\"ngForTrackBy\", ctx.trackByMetric);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.systemAlerts.length > 0);\n          i0.ɵɵadvance(13);\n          i0.ɵɵtextInterpolate(ctx.getHealthyCount());\n          i0.ɵɵadvance(9);\n          i0.ɵɵtextInterpolate(ctx.getWarningCount());\n          i0.ɵɵadvance(9);\n          i0.ɵɵtextInterpolate(ctx.getCriticalCount());\n          i0.ɵɵadvance(9);\n          i0.ɵɵtextInterpolate1(\"\", ctx.calculateUptime(), \"%\");\n        }\n      },\n      dependencies: [CommonModule, i1.NgClass, i1.NgForOf, i1.NgIf, MatCardModule, i2.MatCard, i2.MatCardContent, i2.MatCardHeader, i2.MatCardTitle, MatButtonModule, i3.MatIconButton, MatIconModule, i4.MatIcon, MatProgressSpinnerModule, MatChipsModule, i5.MatChipListbox, i5.MatChipOption, i1.DatePipe],\n      styles: [\".performance-container[_ngcontent-%COMP%]{padding:1.5rem}.performance-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:flex-start;margin-bottom:2rem;flex-wrap:wrap;gap:1rem}.performance-header[_ngcontent-%COMP%]   .header-content[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:1.75rem;font-weight:700;color:#1f2937;margin:0 0 .5rem}.performance-header[_ngcontent-%COMP%]   .header-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{color:#6b7280;margin:0}.performance-header[_ngcontent-%COMP%]   .header-controls[_ngcontent-%COMP%]{display:flex;align-items:center;gap:1rem}:is()   .mat-mdc-chip-option[_ngcontent-%COMP%]{border-radius:20px}:is()   .mat-mdc-chip-option.mdc-chip--selected[_ngcontent-%COMP%]{background-color:#3b82f6;color:#fff}.metrics-grid[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:1.5rem;margin-bottom:2rem}.metric-card[_ngcontent-%COMP%]{border-radius:16px;border:none;box-shadow:0 4px 12px #0000001a;transition:all .3s ease}.metric-card[_ngcontent-%COMP%]:hover{transform:translateY(-2px);box-shadow:0 8px 20px #00000026}.metric-card.status-warning[_ngcontent-%COMP%]{border-left:4px solid #f59e0b}.metric-card.status-critical[_ngcontent-%COMP%]{border-left:4px solid #ef4444;animation:_ngcontent-%COMP%_critical-pulse 2s infinite}.metric-card.status-healthy[_ngcontent-%COMP%]{border-left:4px solid #10b981}:is()   .mat-mdc-card-title[_ngcontent-%COMP%]{font-weight:600;color:#1f2937}:is()   .metric-status[_ngcontent-%COMP%]   .status-indicator[_ngcontent-%COMP%]{width:12px;height:12px;border-radius:50%;position:relative}:is()   .metric-status[_ngcontent-%COMP%]   .status-indicator.status-healthy[_ngcontent-%COMP%]{background-color:#10b981}:is()   .metric-status[_ngcontent-%COMP%]   .status-indicator.status-warning[_ngcontent-%COMP%]{background-color:#f59e0b}:is()   .metric-status[_ngcontent-%COMP%]   .status-indicator.status-critical[_ngcontent-%COMP%]{background-color:#ef4444}:is()   .metric-status[_ngcontent-%COMP%]   .status-indicator[_ngcontent-%COMP%]   .pulse[_ngcontent-%COMP%]{position:absolute;inset:-4px;border-radius:50%;background-color:inherit;opacity:.4;animation:_ngcontent-%COMP%_pulse-ring 1.5s infinite}.metric-display[_ngcontent-%COMP%]   .metric-value[_ngcontent-%COMP%]{font-size:2.5rem;font-weight:700;color:#1f2937;margin-bottom:1rem;display:flex;align-items:baseline;gap:.5rem}.metric-display[_ngcontent-%COMP%]   .metric-value[_ngcontent-%COMP%]   .metric-unit[_ngcontent-%COMP%]{font-size:1rem;color:#6b7280;font-weight:400}.metric-display[_ngcontent-%COMP%]   .metric-thresholds[_ngcontent-%COMP%]{margin-bottom:1rem}.metric-display[_ngcontent-%COMP%]   .metric-thresholds[_ngcontent-%COMP%]   .threshold[_ngcontent-%COMP%]{display:flex;justify-content:space-between;font-size:.875rem;margin-bottom:.25rem}.metric-display[_ngcontent-%COMP%]   .metric-thresholds[_ngcontent-%COMP%]   .threshold.warning[_ngcontent-%COMP%]{color:#d97706}.metric-display[_ngcontent-%COMP%]   .metric-thresholds[_ngcontent-%COMP%]   .threshold.critical[_ngcontent-%COMP%]{color:#dc2626}.metric-display[_ngcontent-%COMP%]   .metric-thresholds[_ngcontent-%COMP%]   .threshold[_ngcontent-%COMP%]   .threshold-label[_ngcontent-%COMP%]{font-weight:500}.metric-display[_ngcontent-%COMP%]   .metric-chart[_ngcontent-%COMP%]   .mini-chart[_ngcontent-%COMP%]{display:flex;align-items:end;height:60px;gap:2px}.metric-display[_ngcontent-%COMP%]   .metric-chart[_ngcontent-%COMP%]   .mini-chart[_ngcontent-%COMP%]   .chart-bar[_ngcontent-%COMP%]{flex:1;min-height:4px;border-radius:2px;transition:all .3s ease}.metric-display[_ngcontent-%COMP%]   .metric-chart[_ngcontent-%COMP%]   .mini-chart[_ngcontent-%COMP%]   .chart-bar.bar-healthy[_ngcontent-%COMP%]{background-color:#10b981}.metric-display[_ngcontent-%COMP%]   .metric-chart[_ngcontent-%COMP%]   .mini-chart[_ngcontent-%COMP%]   .chart-bar.bar-warning[_ngcontent-%COMP%]{background-color:#f59e0b}.metric-display[_ngcontent-%COMP%]   .metric-chart[_ngcontent-%COMP%]   .mini-chart[_ngcontent-%COMP%]   .chart-bar.bar-critical[_ngcontent-%COMP%]{background-color:#ef4444}.alerts-card[_ngcontent-%COMP%]{margin-bottom:2rem;border-radius:16px;border:none;box-shadow:0 4px 12px #0000001a}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item[_ngcontent-%COMP%]{display:flex;align-items:flex-start;padding:1rem 0;border-bottom:1px solid rgba(0,0,0,.05)}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item[_ngcontent-%COMP%]:last-child{border-bottom:none}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item[_ngcontent-%COMP%]   .alert-icon[_ngcontent-%COMP%]{margin-right:1rem}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item[_ngcontent-%COMP%]   .alert-icon[_ngcontent-%COMP%]     mat-icon{font-size:1.25rem}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item[_ngcontent-%COMP%]   .alert-content[_ngcontent-%COMP%]{flex:1}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item[_ngcontent-%COMP%]   .alert-content[_ngcontent-%COMP%]   .alert-title[_ngcontent-%COMP%]{font-weight:600;color:#1f2937;margin-bottom:.25rem}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item[_ngcontent-%COMP%]   .alert-content[_ngcontent-%COMP%]   .alert-message[_ngcontent-%COMP%]{color:#6b7280;font-size:.875rem;margin-bottom:.5rem}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item[_ngcontent-%COMP%]   .alert-content[_ngcontent-%COMP%]   .alert-timestamp[_ngcontent-%COMP%]{color:#9ca3af;font-size:.75rem}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item.alert-warning[_ngcontent-%COMP%]   .alert-icon[_ngcontent-%COMP%]{color:#f59e0b}.alerts-card[_ngcontent-%COMP%]   .alerts-list[_ngcontent-%COMP%]   .alert-item.alert-critical[_ngcontent-%COMP%]   .alert-icon[_ngcontent-%COMP%]{color:#ef4444}.summary-card[_ngcontent-%COMP%]{border-radius:16px;border:none;box-shadow:0 4px 12px #0000001a}.summary-card[_ngcontent-%COMP%]   .summary-grid[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1.5rem}.summary-card[_ngcontent-%COMP%]   .summary-grid[_ngcontent-%COMP%]   .summary-item[_ngcontent-%COMP%]{display:flex;align-items:center;gap:1rem}.summary-card[_ngcontent-%COMP%]   .summary-grid[_ngcontent-%COMP%]   .summary-item[_ngcontent-%COMP%]   .summary-icon[_ngcontent-%COMP%]{width:48px;height:48px;border-radius:50%;display:flex;align-items:center;justify-content:center;color:#fff}.summary-card[_ngcontent-%COMP%]   .summary-grid[_ngcontent-%COMP%]   .summary-item[_ngcontent-%COMP%]   .summary-icon.healthy[_ngcontent-%COMP%]{background-color:#10b981}.summary-card[_ngcontent-%COMP%]   .summary-grid[_ngcontent-%COMP%]   .summary-item[_ngcontent-%COMP%]   .summary-icon.warning[_ngcontent-%COMP%]{background-color:#f59e0b}.summary-card[_ngcontent-%COMP%]   .summary-grid[_ngcontent-%COMP%]   .summary-item[_ngcontent-%COMP%]   .summary-icon.critical[_ngcontent-%COMP%]{background-color:#ef4444}.summary-card[_ngcontent-%COMP%]   .summary-grid[_ngcontent-%COMP%]   .summary-item[_ngcontent-%COMP%]   .summary-icon.info[_ngcontent-%COMP%]{background-color:#3b82f6}.summary-card[_ngcontent-%COMP%]   .summary-grid[_ngcontent-%COMP%]   .summary-item[_ngcontent-%COMP%]   .summary-content[_ngcontent-%COMP%]   .summary-value[_ngcontent-%COMP%]{font-size:1.5rem;font-weight:700;color:#1f2937}.summary-card[_ngcontent-%COMP%]   .summary-grid[_ngcontent-%COMP%]   .summary-item[_ngcontent-%COMP%]   .summary-content[_ngcontent-%COMP%]   .summary-label[_ngcontent-%COMP%]{color:#6b7280;font-size:.875rem}@keyframes _ngcontent-%COMP%_critical-pulse{0%,to{box-shadow:0 4px 12px #0000001a}50%{box-shadow:0 4px 12px #ef44444d}}@keyframes _ngcontent-%COMP%_pulse-ring{0%{transform:scale(.8);opacity:1}to{transform:scale(1.4);opacity:0}}@media (max-width: 768px){.performance-container[_ngcontent-%COMP%]{padding:1rem}.performance-header[_ngcontent-%COMP%]{flex-direction:column;align-items:flex-start}.metrics-grid[_ngcontent-%COMP%]{grid-template-columns:1fr}.summary-grid[_ngcontent-%COMP%]{grid-template-columns:repeat(2,1fr)}}\"],\n      changeDetection: 0\n    }));\n  }\n  _staticBlock();\n  return PerformanceMonitorComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}