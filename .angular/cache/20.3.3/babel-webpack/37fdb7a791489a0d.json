{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\nimport { UserRole } from '../models/auth.model';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n/**\n * Role-based Authorization Guard\n * Ensures user has the required role(s) to access a route\n */\nexport const roleGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const snackBar = inject(MatSnackBar);\n  // Get required roles from route data\n  const requiredRoles = route.data['roles'];\n  if (!requiredRoles || requiredRoles.length === 0) {\n    console.warn('No roles specified for role guard');\n    return authService.isAuthenticated$.pipe(take(1), map(isAuth => isAuth || router.createUrlTree(['/auth/login'])));\n  }\n  return authService.currentUser$.pipe(take(1), map(user => {\n    if (!user) {\n      // Not authenticated\n      return router.createUrlTree(['/auth/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n    }\n    // Check if user has any of the required roles\n    const hasRole = authService.hasRole(requiredRoles);\n    if (hasRole) {\n      return true;\n    } else {\n      // User doesn't have required role\n      console.warn(`User with role '${user.role}' attempted to access route requiring roles:`, requiredRoles);\n      // Show notification\n      snackBar.open('You do not have permission to access this page', 'Dismiss', {\n        duration: 5000,\n        panelClass: ['warning-snackbar'],\n        horizontalPosition: 'end',\n        verticalPosition: 'bottom'\n      });\n      // Redirect to appropriate page based on user role\n      switch (user.role) {\n        case UserRole.ADMIN:\n          return router.createUrlTree(['/admin/dashboard']);\n        case UserRole.INSPECTOR:\n          return router.createUrlTree(['/dashboard']);\n        case UserRole.VIEWER:\n          return router.createUrlTree(['/dashboard']);\n        default:\n          return router.createUrlTree(['/']);\n      }\n    }\n  }));\n};\n/**\n * Admin-only Guard\n * Shortcut guard for admin-only routes\n */\nexport const adminGuard = (route, state) => {\n  // Set admin role requirement and delegate to roleGuard\n  route.data = {\n    ...route.data,\n    roles: [UserRole.ADMIN]\n  };\n  return roleGuard(route, state);\n};\n/**\n * Inspector Guard\n * Allows both inspectors and admins\n */\nexport const inspectorGuard = (route, state) => {\n  route.data = {\n    ...route.data,\n    roles: [UserRole.INSPECTOR, UserRole.ADMIN]\n  };\n  return roleGuard(route, state);\n};\n/**\n * Permission-based Guard Factory\n * Creates a guard that checks for specific permissions\n */\nexport function permissionGuard(permission) {\n  return (route, state) => {\n    const authService = inject(AuthService);\n    const router = inject(Router);\n    const snackBar = inject(MatSnackBar);\n    return authService.currentUser$.pipe(take(1), map(user => {\n      if (!user) {\n        return router.createUrlTree(['/auth/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        });\n      }\n      if (authService.hasPermission(permission)) {\n        return true;\n      }\n      snackBar.open(`You do not have permission to perform this action`, 'Dismiss', {\n        duration: 5000,\n        panelClass: ['warning-snackbar']\n      });\n      return router.createUrlTree(['/access-denied']);\n    }));\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}