{"ast":null,"code":"/**\n * Authentication Models and Interfaces\n */\n/**\n * User roles enum\n */\nexport var UserRole = /*#__PURE__*/function (UserRole) {\n  UserRole[\"ADMIN\"] = \"admin\";\n  UserRole[\"INSPECTOR\"] = \"inspector\";\n  UserRole[\"VIEWER\"] = \"viewer\";\n  return UserRole;\n}(UserRole || {});\n/**\n * Default role permissions\n */\nexport const DEFAULT_PERMISSIONS = {\n  [UserRole.ADMIN]: ['users:*', 'inspections:*', 'reports:*', 'settings:*', 'organizations:*', 'admin:*'],\n  [UserRole.INSPECTOR]: ['inspections:create', 'inspections:read', 'inspections:update', 'inspections:delete:own', 'defects:*', 'files:upload', 'files:read', 'reports:read', 'reports:generate:own', 'profile:update:own'],\n  [UserRole.VIEWER]: ['inspections:read', 'defects:read', 'files:read', 'reports:read', 'profile:read:own']\n};\n/**\n * Check if user has permission\n */\nexport function hasPermission(user, permission) {\n  if (!user) return false;\n  const userPermissions = DEFAULT_PERMISSIONS[user.role] || [];\n  // Check for wildcard permission\n  if (userPermissions.includes('*')) return true;\n  // Check for exact permission\n  if (userPermissions.includes(permission)) return true;\n  // Check for wildcard in resource\n  const [resource, action] = permission.split(':');\n  if (userPermissions.includes(`${resource}:*`)) return true;\n  return false;\n}\n/**\n * Check if user has any of the required roles\n */\nexport function hasRole(user, roles) {\n  if (!user) return false;\n  const requiredRoles = Array.isArray(roles) ? roles : [roles];\n  return requiredRoles.includes(user.role);\n}\n/**\n * Check if user can access resource\n */\nexport function canAccess(user, resource, action) {\n  return hasPermission(user, `${resource}:${action}`);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}