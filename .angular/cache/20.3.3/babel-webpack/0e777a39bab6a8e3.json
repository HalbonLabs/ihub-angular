{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { throwError, BehaviorSubject, filter, take, switchMap, catchError } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { ApiService } from '../services/api.service';\n/**\n * JWT Interceptor - Attaches JWT token to outgoing requests\n * and handles token refresh on 401 responses\n */\nexport const jwtInterceptor = (req, next) => {\n  // Skip interceptor for auth endpoints to avoid circular dependencies\n  const authEndpoints = ['/auth/login', '/auth/register', '/auth/refresh', '/auth/forgot-password'];\n  const isAuthEndpoint = authEndpoints.some(endpoint => req.url.includes(endpoint));\n  if (isAuthEndpoint) {\n    return next(req);\n  }\n  // Get token from localStorage\n  const token = getStoredToken();\n  // Clone request and add authorization header if token exists\n  let authReq = req;\n  if (token) {\n    authReq = addTokenToRequest(req, token);\n  }\n  // Handle the request\n  return next(authReq).pipe(catchError(error => {\n    if (error instanceof HttpErrorResponse && error.status === 401) {\n      // Token might be expired, try to refresh\n      return handleTokenRefresh(req, next);\n    }\n    return throwError(() => error);\n  }));\n};\n/**\n * Helper function to get stored token\n */\nfunction getStoredToken() {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    return localStorage.getItem(environment.jwtTokenKey);\n  }\n  return null;\n}\n/**\n * Helper function to get refresh token\n */\nfunction getRefreshToken() {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    return localStorage.getItem(environment.refreshTokenKey);\n  }\n  return null;\n}\n/**\n * Helper function to add token to request\n */\nfunction addTokenToRequest(req, token) {\n  return req.clone({\n    setHeaders: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n}\n/**\n * Handle token refresh logic\n */\nlet isRefreshing = false;\nlet refreshTokenSubject = new BehaviorSubject(null);\nfunction handleTokenRefresh(req, next) {\n  const apiService = inject(ApiService);\n  const refreshToken = getRefreshToken();\n  if (!refreshToken) {\n    // No refresh token, redirect to login\n    apiService.clearToken();\n    // In a real app, inject Router and navigate to login\n    return throwError(() => new Error('Session expired. Please login again.'));\n  }\n  if (!isRefreshing) {\n    isRefreshing = true;\n    refreshTokenSubject.next(null);\n    return apiService.post('/auth/refresh', {\n      refresh_token: refreshToken\n    }).pipe(switchMap(response => {\n      isRefreshing = false;\n      if (response.success && response.data.access_token) {\n        const newToken = response.data.access_token;\n        // Store new tokens\n        localStorage.setItem(environment.jwtTokenKey, newToken);\n        if (response.data.refresh_token) {\n          localStorage.setItem(environment.refreshTokenKey, response.data.refresh_token);\n        }\n        refreshTokenSubject.next(newToken);\n        // Retry original request with new token\n        return next(addTokenToRequest(req, newToken));\n      }\n      // Refresh failed\n      apiService.clearToken();\n      return throwError(() => new Error('Session expired. Please login again.'));\n    }), catchError(error => {\n      isRefreshing = false;\n      apiService.clearToken();\n      return throwError(() => error);\n    }));\n  } else {\n    // Wait for refresh to complete, then retry request\n    return refreshTokenSubject.pipe(filter(token => token !== null), take(1), switchMap(token => {\n      return next(addTokenToRequest(req, token));\n    }));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}