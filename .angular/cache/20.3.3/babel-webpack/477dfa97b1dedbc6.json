{"ast":null,"code":"import { inject } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { throwError } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n/**\n * Global Error Interceptor\n * Handles HTTP errors and displays user-friendly messages\n */\nexport const errorInterceptor = (req, next) => {\n  const snackBar = inject(MatSnackBar);\n  const router = inject(Router);\n  // Track request start time for timeout detection\n  const startTime = Date.now();\n  return next(req).pipe(catchError(error => {\n    const elapsedTime = Date.now() - startTime;\n    let errorMessage = 'An unexpected error occurred';\n    let shouldShowToast = true;\n    if (error.error instanceof ErrorEvent) {\n      // Client-side or network error\n      console.error('Client Error:', error.error);\n      if (elapsedTime > environment.apiTimeout) {\n        errorMessage = 'Request timeout. Please check your connection and try again.';\n      } else {\n        errorMessage = 'Network error. Please check your internet connection.';\n      }\n    } else {\n      // Server-side error\n      console.error(`Server Error ${error.status}:`, error);\n      switch (error.status) {\n        case 0:\n          errorMessage = 'Unable to connect to server. Please check your connection.';\n          break;\n        case 400:\n          errorMessage = error.error?.message || 'Invalid request. Please check your input.';\n          break;\n        case 401:\n          errorMessage = 'Your session has expired. Please login again.';\n          // Don't show toast for 401 in auth endpoints\n          if (!req.url.includes('/auth/')) {\n            setTimeout(() => {\n              router.navigate(['/auth/login'], {\n                queryParams: {\n                  returnUrl: router.url\n                }\n              });\n            }, 1000);\n          } else {\n            shouldShowToast = false;\n          }\n          break;\n        case 403:\n          errorMessage = 'You do not have permission to perform this action.';\n          break;\n        case 404:\n          errorMessage = error.error?.message || 'The requested resource was not found.';\n          break;\n        case 409:\n          errorMessage = error.error?.message || 'This action conflicts with existing data.';\n          break;\n        case 422:\n          // Validation errors\n          if (error.error?.errors && Array.isArray(error.error.errors)) {\n            errorMessage = error.error.errors.join('\\n');\n          } else {\n            errorMessage = error.error?.message || 'Validation failed. Please check your input.';\n          }\n          break;\n        case 429:\n          errorMessage = 'Too many requests. Please slow down and try again.';\n          break;\n        case 500:\n          errorMessage = 'Internal server error. Please try again later.';\n          break;\n        case 502:\n          errorMessage = 'Bad gateway. The server is temporarily unavailable.';\n          break;\n        case 503:\n          errorMessage = 'Service unavailable. Please try again later.';\n          break;\n        case 504:\n          errorMessage = 'Gateway timeout. The server took too long to respond.';\n          break;\n        default:\n          if (error.error?.message) {\n            errorMessage = error.error.message;\n          } else if (error.message) {\n            errorMessage = error.message;\n          } else {\n            errorMessage = `Server error: ${error.statusText || 'Unknown error'}`;\n          }\n      }\n    }\n    // Show error notification (except for silent errors)\n    if (shouldShowToast && !req.headers.has('X-Skip-Error-Toast')) {\n      showErrorNotification(snackBar, errorMessage, error.status);\n    }\n    // Log error details for debugging\n    if (!environment.production) {\n      console.group('🔴 HTTP Error Details');\n      console.error('URL:', req.url);\n      console.error('Method:', req.method);\n      console.error('Status:', error.status);\n      console.error('Message:', errorMessage);\n      console.error('Full Error:', error);\n      console.groupEnd();\n    }\n    // Return error with enhanced message\n    const enhancedError = {\n      ...error,\n      message: errorMessage,\n      timestamp: new Date().toISOString(),\n      path: req.url,\n      method: req.method\n    };\n    return throwError(() => enhancedError);\n  }), finalize(() => {\n    // Any cleanup logic can go here\n    if (!environment.production) {\n      const duration = Date.now() - startTime;\n      if (duration > 3000) {\n        console.warn(`⚠️ Slow request detected: ${req.url} took ${duration}ms`);\n      }\n    }\n  }));\n};\n/**\n * Show error notification using Material Snackbar\n */\nfunction showErrorNotification(snackBar, message, status) {\n  const duration = status === 401 ? 3000 : 5000;\n  const panelClass = getErrorPanelClass(status);\n  snackBar.open(message, 'Dismiss', {\n    duration,\n    panelClass,\n    horizontalPosition: 'end',\n    verticalPosition: 'bottom'\n  });\n}\n/**\n * Get appropriate panel class based on error status\n */\nfunction getErrorPanelClass(status) {\n  if (!status) return ['error-snackbar'];\n  if (status >= 400 && status < 500) {\n    return ['warning-snackbar']; // Client errors\n  } else if (status >= 500) {\n    return ['error-snackbar']; // Server errors\n  }\n  return ['info-snackbar'];\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}