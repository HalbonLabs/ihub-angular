{"ast":null,"code":"import { of, BehaviorSubject } from 'rxjs';\nimport { map, tap, delay } from 'rxjs/operators';\nimport { InspectionStatus, InspectionType, PropertyType, Priority, FindingCategory, Severity, DefectCategory, DefectStatus } from '../../../core/models/inspection.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../core/services/api.service\";\nexport let InspectionService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class InspectionService {\n    constructor(apiService) {\n      this.apiService = apiService;\n      this.inspectionsSubject = new BehaviorSubject([]);\n      this.inspections$ = this.inspectionsSubject.asObservable();\n      this.selectedInspectionSubject = new BehaviorSubject(null);\n      this.selectedInspection$ = this.selectedInspectionSubject.asObservable();\n      this.filterSubject = new BehaviorSubject({});\n      this.filter$ = this.filterSubject.asObservable();\n      // Initialize with mock data for development\n      this.loadMockData();\n    }\n    /**\n     * Get all inspections with optional filter\n     */\n    getInspections(filter) {\n      if (filter) {\n        this.filterSubject.next(filter);\n      }\n      // Mock implementation - replace with actual API call\n      return of(this.getMockInspections()).pipe(delay(500), map(inspections => this.applyFilter(inspections, filter || {})), tap(inspections => this.inspectionsSubject.next(inspections)));\n      // Actual API call would be:\n      // return this.apiService.get<{ data: Inspection[] }>(\n      //   API_ENDPOINTS.INSPECTIONS.LIST,\n      //   { params: this.buildFilterParams(filter) }\n      // ).pipe(\n      //   map(response => response.data),\n      //   tap(inspections => this.inspectionsSubject.next(inspections))\n      // );\n    }\n    /**\n     * Get inspection by ID\n     */\n    getInspectionById(id) {\n      // Mock implementation\n      const inspection = this.getMockInspections().find(i => i.id === id);\n      if (inspection) {\n        this.selectedInspectionSubject.next(inspection);\n        return of(inspection).pipe(delay(300));\n      }\n      throw new Error('Inspection not found');\n      // Actual API call:\n      // return this.apiService.get<{ data: Inspection }>(\n      //   API_ENDPOINTS.INSPECTIONS.GET(id)\n      // ).pipe(\n      //   map(response => response.data),\n      //   tap(inspection => this.selectedInspectionSubject.next(inspection))\n      // );\n    }\n    /**\n     * Create new inspection\n     */\n    createInspection(inspection) {\n      // Mock implementation\n      const newInspection = {\n        ...inspection,\n        id: this.generateId(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: 'current-user',\n        findings: [],\n        defects: [],\n        images: []\n      };\n      const currentInspections = this.inspectionsSubject.value;\n      this.inspectionsSubject.next([newInspection, ...currentInspections]);\n      return of(newInspection).pipe(delay(500));\n      // Actual API call:\n      // return this.apiService.post<{ data: Inspection }>(\n      //   API_ENDPOINTS.INSPECTIONS.CREATE,\n      //   inspection\n      // ).pipe(\n      //   map(response => response.data),\n      //   tap(newInspection => {\n      //     const current = this.inspectionsSubject.value;\n      //     this.inspectionsSubject.next([newInspection, ...current]);\n      //   })\n      // );\n    }\n    /**\n     * Update existing inspection\n     */\n    updateInspection(id, updates) {\n      // Mock implementation\n      const currentInspections = this.inspectionsSubject.value;\n      const index = currentInspections.findIndex(i => i.id === id);\n      if (index !== -1) {\n        const updated = {\n          ...currentInspections[index],\n          ...updates,\n          updatedAt: new Date(),\n          updatedBy: 'current-user'\n        };\n        currentInspections[index] = updated;\n        this.inspectionsSubject.next([...currentInspections]);\n        if (this.selectedInspectionSubject.value?.id === id) {\n          this.selectedInspectionSubject.next(updated);\n        }\n        return of(updated).pipe(delay(500));\n      }\n      throw new Error('Inspection not found');\n      // Actual API call:\n      // return this.apiService.put<{ data: Inspection }>(\n      //   API_ENDPOINTS.INSPECTIONS.UPDATE(id),\n      //   updates\n      // ).pipe(\n      //   map(response => response.data),\n      //   tap(updated => this.updateLocalInspection(updated))\n      // );\n    }\n    /**\n     * Delete inspection\n     */\n    deleteInspection(id) {\n      // Mock implementation\n      const currentInspections = this.inspectionsSubject.value;\n      const filtered = currentInspections.filter(i => i.id !== id);\n      this.inspectionsSubject.next(filtered);\n      if (this.selectedInspectionSubject.value?.id === id) {\n        this.selectedInspectionSubject.next(null);\n      }\n      return of(void 0).pipe(delay(500));\n      // Actual API call:\n      // return this.apiService.delete<void>(\n      //   API_ENDPOINTS.INSPECTIONS.DELETE(id)\n      // ).pipe(\n      //   tap(() => {\n      //     const current = this.inspectionsSubject.value;\n      //     this.inspectionsSubject.next(current.filter(i => i.id !== id));\n      //   })\n      // );\n    }\n    /**\n     * Update inspection status\n     */\n    updateStatus(id, status) {\n      return this.updateInspection(id, {\n        status\n      });\n      // Actual API call:\n      // return this.apiService.patch<{ data: Inspection }>(\n      //   API_ENDPOINTS.INSPECTIONS.STATUS(id),\n      //   { status }\n      // ).pipe(\n      //   map(response => response.data),\n      //   tap(updated => this.updateLocalInspection(updated))\n      // );\n    }\n    /**\n     * Add defect to inspection\n     */\n    addDefect(inspectionId, defect) {\n      // Mock implementation\n      const newDefect = {\n        ...defect,\n        id: this.generateId(),\n        inspectionId,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      const inspection = this.inspectionsSubject.value.find(i => i.id === inspectionId);\n      if (inspection) {\n        inspection.defects.push(newDefect);\n        this.updateLocalInspection(inspection);\n      }\n      return of(newDefect).pipe(delay(300));\n    }\n    /**\n     * Get inspection statistics\n     */\n    getStatistics() {\n      // Mock implementation\n      const inspections = this.getMockInspections();\n      const stats = {\n        totalInspections: inspections.length,\n        completedInspections: inspections.filter(i => i.status === InspectionStatus.COMPLETED).length,\n        pendingInspections: inspections.filter(i => i.status === InspectionStatus.SCHEDULED).length,\n        overdueInspections: inspections.filter(i => i.status === InspectionStatus.OVERDUE).length,\n        averageCompletionTime: 120,\n        defectRate: 0.15,\n        revenue: 125000,\n        monthlyTrend: []\n      };\n      return of(stats).pipe(delay(500));\n    }\n    /**\n     * Export inspections to Excel/PDF\n     */\n    exportInspections(format, filter) {\n      // Mock implementation\n      const blob = new Blob(['Mock export data'], {\n        type: format === 'excel' ? 'application/vnd.ms-excel' : 'application/pdf'\n      });\n      return of(blob).pipe(delay(1000));\n    }\n    // Helper methods\n    applyFilter(inspections, filter) {\n      let filtered = [...inspections];\n      if (filter.status?.length) {\n        filtered = filtered.filter(i => filter.status.includes(i.status));\n      }\n      if (filter.type?.length) {\n        filtered = filtered.filter(i => filter.type.includes(i.type));\n      }\n      if (filter.priority?.length) {\n        filtered = filtered.filter(i => filter.priority.includes(i.priority));\n      }\n      if (filter.inspectorId) {\n        filtered = filtered.filter(i => i.inspectorId === filter.inspectorId);\n      }\n      if (filter.clientName) {\n        filtered = filtered.filter(i => i.clientName.toLowerCase().includes(filter.clientName.toLowerCase()));\n      }\n      if (filter.propertyAddress) {\n        filtered = filtered.filter(i => i.propertyAddress.toLowerCase().includes(filter.propertyAddress.toLowerCase()));\n      }\n      if (filter.dateFrom) {\n        filtered = filtered.filter(i => i.scheduledDate >= filter.dateFrom);\n      }\n      if (filter.dateTo) {\n        filtered = filtered.filter(i => i.scheduledDate <= filter.dateTo);\n      }\n      if (filter.hasDefects !== undefined) {\n        filtered = filtered.filter(i => filter.hasDefects ? i.defects.length > 0 : i.defects.length === 0);\n      }\n      if (filter.isPaid !== undefined) {\n        filtered = filtered.filter(i => i.isPaid === filter.isPaid);\n      }\n      return filtered;\n    }\n    updateLocalInspection(inspection) {\n      const current = this.inspectionsSubject.value;\n      const index = current.findIndex(i => i.id === inspection.id);\n      if (index !== -1) {\n        current[index] = inspection;\n        this.inspectionsSubject.next([...current]);\n      }\n      if (this.selectedInspectionSubject.value?.id === inspection.id) {\n        this.selectedInspectionSubject.next(inspection);\n      }\n    }\n    generateId() {\n      return 'insp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    }\n    loadMockData() {\n      this.inspectionsSubject.next(this.getMockInspections());\n    }\n    getMockInspections() {\n      return [{\n        id: '1',\n        referenceNumber: 'REF-2025-001',\n        propertyAddress: '123 Main Street, Springfield, IL 62701',\n        propertyType: PropertyType.SINGLE_FAMILY,\n        clientName: 'John Smith',\n        clientEmail: 'john.smith@email.com',\n        clientPhone: '555-0100',\n        inspectorId: 'ins_001',\n        inspectorName: 'Mike Johnson',\n        organizationId: 'org_001',\n        scheduledDate: new Date(Date.now() + 86400000),\n        status: InspectionStatus.SCHEDULED,\n        type: InspectionType.PRE_PURCHASE,\n        priority: Priority.HIGH,\n        notes: 'Client requested focus on foundation and roof',\n        findings: [],\n        measures: [],\n        defects: [],\n        files: [],\n        images: [],\n        createdAt: new Date(Date.now() - 172800000),\n        updatedAt: new Date(Date.now() - 86400000),\n        createdBy: 'admin',\n        updatedBy: 'admin',\n        tags: ['urgent', 'first-time-buyer'],\n        estimatedDuration: 180,\n        fee: 450,\n        isPaid: false\n      }, {\n        id: '2',\n        referenceNumber: 'REF-2025-002',\n        propertyAddress: '456 Oak Avenue, Riverside, CA 92501',\n        propertyType: PropertyType.CONDO,\n        clientName: 'Sarah Williams',\n        clientEmail: 'sarah.w@email.com',\n        clientPhone: '555-0101',\n        inspectorId: 'ins_002',\n        inspectorName: 'Jane Doe',\n        organizationId: 'org_001',\n        scheduledDate: new Date(Date.now() - 86400000),\n        completedDate: new Date(Date.now() - 43200000),\n        status: InspectionStatus.COMPLETED,\n        type: InspectionType.ANNUAL,\n        priority: Priority.MEDIUM,\n        notes: 'Annual inspection for insurance',\n        findings: [{\n          id: 'f1',\n          category: FindingCategory.ELECTRICAL,\n          severity: Severity.MINOR,\n          title: 'Outdated electrical panel',\n          description: 'Electrical panel is functional but outdated',\n          location: 'Basement',\n          recommendations: 'Consider upgrading in next 2-3 years',\n          estimatedCost: 2500,\n          createdAt: new Date()\n        }],\n        measures: [],\n        defects: [{\n          id: 'd1',\n          inspectionId: '2',\n          category: DefectCategory.PLUMBING,\n          severity: Severity.MODERATE,\n          status: DefectStatus.OPEN,\n          title: 'Leaking faucet',\n          description: 'Kitchen faucet has minor leak',\n          location: 'Kitchen',\n          recommendations: 'Replace faucet cartridge',\n          estimatedRepairCost: 150,\n          priority: Priority.MEDIUM,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }],\n        files: [],\n        images: [],\n        reportUrl: '/reports/inspection-2.pdf',\n        reportGeneratedAt: new Date(Date.now() - 43200000),\n        createdAt: new Date(Date.now() - 604800000),\n        updatedAt: new Date(Date.now() - 43200000),\n        createdBy: 'admin',\n        updatedBy: 'ins_002',\n        tags: ['annual', 'insurance'],\n        estimatedDuration: 120,\n        actualDuration: 135,\n        fee: 350,\n        isPaid: true\n      }, {\n        id: '3',\n        referenceNumber: 'REF-2025-003',\n        propertyAddress: '789 Pine Road, Austin, TX 78701',\n        propertyType: PropertyType.COMMERCIAL,\n        clientName: 'ABC Corporation',\n        clientEmail: 'facilities@abc.com',\n        clientPhone: '555-0102',\n        inspectorId: 'ins_001',\n        inspectorName: 'Mike Johnson',\n        organizationId: 'org_001',\n        scheduledDate: new Date(),\n        status: InspectionStatus.IN_PROGRESS,\n        type: InspectionType.COMMERCIAL,\n        priority: Priority.HIGH,\n        notes: 'Quarterly commercial property inspection',\n        findings: [],\n        measures: [],\n        defects: [],\n        files: [],\n        images: [],\n        createdAt: new Date(Date.now() - 259200000),\n        updatedAt: new Date(),\n        createdBy: 'admin',\n        updatedBy: 'admin',\n        tags: ['commercial', 'quarterly'],\n        estimatedDuration: 240,\n        fee: 850,\n        isPaid: false\n      }, {\n        id: '4',\n        referenceNumber: 'REF-2025-004',\n        propertyAddress: '321 Elm Street, Denver, CO 80202',\n        propertyType: PropertyType.MULTI_FAMILY,\n        clientName: 'Property Management Inc',\n        clientEmail: 'pm@property.com',\n        clientPhone: '555-0103',\n        inspectorId: 'ins_003',\n        inspectorName: 'Tom Brown',\n        organizationId: 'org_001',\n        scheduledDate: new Date(Date.now() + 172800000),\n        status: InspectionStatus.SCHEDULED,\n        type: InspectionType.PRE_LISTING,\n        priority: Priority.MEDIUM,\n        notes: 'Pre-listing inspection for duplex',\n        findings: [],\n        measures: [],\n        defects: [],\n        files: [],\n        images: [],\n        createdAt: new Date(Date.now() - 86400000),\n        updatedAt: new Date(Date.now() - 86400000),\n        createdBy: 'admin',\n        updatedBy: 'admin',\n        tags: ['pre-listing', 'duplex'],\n        estimatedDuration: 180,\n        fee: 550,\n        isPaid: false\n      }, {\n        id: '5',\n        referenceNumber: 'REF-2025-005',\n        propertyAddress: '654 Maple Drive, Seattle, WA 98101',\n        propertyType: PropertyType.TOWNHOUSE,\n        clientName: 'Emily Chen',\n        clientEmail: 'emily.c@email.com',\n        clientPhone: '555-0104',\n        inspectorId: 'ins_002',\n        inspectorName: 'Jane Doe',\n        organizationId: 'org_001',\n        scheduledDate: new Date(Date.now() - 259200000),\n        status: InspectionStatus.CANCELLED,\n        type: InspectionType.NEW_CONSTRUCTION,\n        priority: Priority.LOW,\n        notes: 'New construction final inspection - Client postponed',\n        findings: [],\n        measures: [],\n        defects: [],\n        files: [],\n        images: [],\n        createdAt: new Date(Date.now() - 432000000),\n        updatedAt: new Date(Date.now() - 259200000),\n        createdBy: 'admin',\n        updatedBy: 'admin',\n        tags: ['new-construction', 'postponed'],\n        estimatedDuration: 150,\n        fee: 400,\n        isPaid: false\n      }];\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function InspectionService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || InspectionService)(i0.ɵɵinject(i1.ApiService));\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InspectionService,\n      factory: InspectionService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return InspectionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}