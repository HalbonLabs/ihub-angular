{"ast":null,"code":"/**\n * Custom validators for authentication forms\n */\n/**\n * Email validator with proper format checking\n */\nexport function emailValidator() {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return control => {\n    if (!control.value) {\n      return null; // Don't validate empty values (use required validator for that)\n    }\n    const valid = emailRegex.test(control.value);\n    return valid ? null : {\n      email: {\n        value: control.value\n      }\n    };\n  };\n}\n/**\n * Password strength validator\n * Requires: min 8 chars, 1 uppercase, 1 lowercase, 1 number, 1 special char\n */\nexport function passwordStrengthValidator() {\n  return control => {\n    if (!control.value) {\n      return null;\n    }\n    const password = control.value;\n    const errors = {};\n    if (password.length < 8) {\n      errors['minLength'] = {\n        requiredLength: 8,\n        actualLength: password.length\n      };\n    }\n    if (!/[A-Z]/.test(password)) {\n      errors['requireUppercase'] = true;\n    }\n    if (!/[a-z]/.test(password)) {\n      errors['requireLowercase'] = true;\n    }\n    if (!/[0-9]/.test(password)) {\n      errors['requireNumber'] = true;\n    }\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      errors['requireSpecialChar'] = true;\n    }\n    return Object.keys(errors).length > 0 ? {\n      passwordStrength: errors\n    } : null;\n  };\n}\n/**\n * Password match validator for confirm password fields\n */\nexport function passwordMatchValidator(passwordField = 'password') {\n  return control => {\n    const parent = control.parent;\n    if (!parent) {\n      return null;\n    }\n    const password = parent.get(passwordField);\n    const confirmPassword = control;\n    if (!password || !confirmPassword.value) {\n      return null;\n    }\n    if (password.value !== confirmPassword.value) {\n      return {\n        passwordMismatch: true\n      };\n    }\n    return null;\n  };\n}\n/**\n * Phone number validator\n */\nexport function phoneNumberValidator() {\n  // Accepts formats: +1234567890, (123) 456-7890, 123-456-7890, etc.\n  const phoneRegex = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\n  return control => {\n    if (!control.value) {\n      return null;\n    }\n    const valid = phoneRegex.test(control.value);\n    return valid ? null : {\n      phoneNumber: {\n        value: control.value\n      }\n    };\n  };\n}\n/**\n * No whitespace validator\n */\nexport function noWhitespaceValidator() {\n  return control => {\n    if (!control.value) {\n      return null;\n    }\n    const isWhitespace = (control.value || '').trim().length === 0;\n    return isWhitespace ? {\n      whitespace: true\n    } : null;\n  };\n}\n/**\n * Get error message for form control\n */\nexport function getErrorMessage(control, fieldName = 'Field') {\n  if (!control || !control.errors) {\n    return '';\n  }\n  const errors = control.errors;\n  if (errors['required']) {\n    return `${fieldName} is required`;\n  }\n  if (errors['email']) {\n    return 'Please enter a valid email address';\n  }\n  if (errors['minlength']) {\n    return `${fieldName} must be at least ${errors['minlength'].requiredLength} characters`;\n  }\n  if (errors['maxlength']) {\n    return `${fieldName} must not exceed ${errors['maxlength'].requiredLength} characters`;\n  }\n  if (errors['passwordStrength']) {\n    const strengthErrors = errors['passwordStrength'];\n    if (strengthErrors['minLength']) {\n      return 'Password must be at least 8 characters';\n    }\n    if (strengthErrors['requireUppercase']) {\n      return 'Password must contain at least one uppercase letter';\n    }\n    if (strengthErrors['requireLowercase']) {\n      return 'Password must contain at least one lowercase letter';\n    }\n    if (strengthErrors['requireNumber']) {\n      return 'Password must contain at least one number';\n    }\n    if (strengthErrors['requireSpecialChar']) {\n      return 'Password must contain at least one special character';\n    }\n  }\n  if (errors['passwordMismatch']) {\n    return 'Passwords do not match';\n  }\n  if (errors['phoneNumber']) {\n    return 'Please enter a valid phone number';\n  }\n  if (errors['whitespace']) {\n    return `${fieldName} cannot be only whitespace`;\n  }\n  return 'Invalid input';\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}